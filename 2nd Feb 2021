1.
// Abstract Classes //
using System;

public abstract class Customer
{
    public abstract void Print();
    public void Print2()
    {
        Console.WriteLine("Technovert");
    }
}

    

public class Program:Customer
{
    public override void Print()
    {
        Console.WriteLine("Abstract class Example");
    }
    
    public static void Main()
    {
        Customer C = new Program();
        C.Print();
        C.Print2();
    }
}


2.
// INTERFACES //
using System;

interface ICustomer
{
    void Print();
}

interface ICustomer2
{
    void Print2();
}
class Customer : ICustomer, ICustomer2
{
    public void Print()
    {
        Console.WriteLine("Interface Example");
    }
    public void Print2()
    {
        Console.WriteLine("Hello Rishabh");
    }
}
public class Program
{
    public static void Main()
    {
        Customer C1 = new Customer();
        C1.Print();
        C1.Print2();
    }
}



3.
// Explicit Interface Implementation to manage Interface Ambuiguity //
using System;

interface ICustomer
{
    void Print();
}

interface ICustomer2
{
    void Print();
}

public class Program:ICustomer,ICustomer2
{
    void ICustomer.Print()
    {
        Console.WriteLine("Interface Example");
    }
    void ICustomer2.Print()
    {
        Console.WriteLine("Hello Rishabh");
    }
    public static void Main()
    {
        Program P = new Program();
        ((ICustomer)P).Print();
        ((ICustomer2)P).Print();
    }
}


4.
// SINGLE INTERFACE//
using System;

interface ICustomer
{
    void Print();
}

class Customer : ICustomer
{
    public void Print()
    {
        Console.WriteLine("Interface Example");
    }
}
public class Program
{
    public static void Main()
    {
        Customer C1 = new Customer();
        C1.Print();
    }
}


5.
// DNS.GetHostName //
using System;
using System.Net;

namespace MyHostName
{
    class Program
    {
        static void Main(string[] args)
        {
            var hostName = Dns.GetHostName();
            Console.WriteLine($"Hostname: {hostName}");
        }
    }
}


6.
//Single Catch for multiple exceptions using Exception Filters//
using System;
using System.IO;
namespace ExceptionHandling
{
    class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                StreamReader sr = new StreamReader("/Users/apple/Desktop/Data1.txt");
                Console.WriteLine(sr.ReadToEnd());
                sr.Close();
              
            }
            catch(Exception ex) when(ex is ArgumentException||ex is FileNotFoundException)
            {
                Console.WriteLine("Please check, there is an error");
            }
        }
    }
}


7.
// Single Catch for multiple exceptions using If-Else//
using System;
using System.IO;
namespace ExceptionHandling
{
    class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                StreamReader sr = new StreamReader("/Users/apple/Desktop/Data1.txt");
                Console.WriteLine(sr.ReadToEnd());
                sr.Close();
              
            }
            catch(Exception ex) 
            {
                if (ex is FileNotFoundException)
                    Console.WriteLine("FileNotFound Exception");
                else if (ex is ArithmeticException)
                    Console.WriteLine("Arithmetic Exception");
                else
                    Console.WriteLine("Please check, there is an error");
            }
        }
    }
}

using System;
using System.IO;
namespace ExceptionHandling
{
    class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                int a = 0, b = 10;
                int c = b / a;
                Console.WriteLine(c);
              
              
            }
            catch(Exception ex) 
            {
                if (ex is FileNotFoundException)
                    Console.WriteLine("FileNotFound");
                else if (ex is ArithmeticException)
                    Console.WriteLine("Arithmetic Exception");
                else
                    Console.WriteLine("Please check, there is an error");
            }
        }
    }
}

8.
// Multiple inheritance using Interfaces //

using System;
namespace MultipleInheritance
{
    interface I1
    {
        void First();
    }
    class A : I1
    {
        public void First()
        {
            Console.WriteLine("A");
        }
    }
    interface I2
    {
        void Second();
    }
    class B : I2
    {
        public void Second()
        {
            Console.WriteLine("B");
        }
    }

    class AB : I1, I2
    {
        A a = new A();
        B b = new B();
        public void First()
        {
            a.First();
        }
        public void Second()
        {
            b.Second();
        }
    }
    class Program
    {
        public static void Main(string[] args)
        {
            AB ab = new AB();
            ab.First();
            ab.Second();
        }
    }
}



9.
// Delegates //

using System;
public delegate void TechnovertTraining(string Message);

class Program
{
    public static void Main(string[] args)
    {
        TechnovertTraining tt = new TechnovertTraining(Training);
        tt("Welcome to Technovert");
    }

    public static void Training(string str)
    {
        Console.WriteLine(str);
    }
}


10.
// without delegate vs with delegate //

.... Without.....
using System;
using System.Collections.Generic;

class Program
{
    public static void Main(string[] args)
    {
        List<Employee> emplist = new List<Employee>();
        emplist.Add(new Employee() { ID = 1, Salary = 5000, Experience=5 });
        emplist.Add(new Employee() { ID = 2, Salary = 3000, Experience = 3 });
        emplist.Add(new Employee() { ID = 3, Salary = 2000, Experience = 2 });
        emplist.Add(new Employee() { ID = 4, Salary = 6000, Experience = 6 });
        Employee.Promote(emplist);

    }
}
class Employee
{
    public int ID { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }

   public static void Promote(List<Employee> emplt)
    {
        foreach(Employee emp in emplt)
        {
            if(emp.Experience>=5)
            Console.WriteLine(emp.ID);
        }
    }

}

...With Delegate & Lambda Expressions code improved...

using System;
using System.Collections.Generic;

class Program
{
    public static void Main(string[] args)
    {
        List<Employee> emplist = new List<Employee>();
        emplist.Add(new Employee() { ID = 1, Salary = 5000, Experience = 5 });
        emplist.Add(new Employee() { ID = 2, Salary = 3000, Experience = 3 });
        emplist.Add(new Employee() { ID = 3, Salary = 2000, Experience = 2 });
        emplist.Add(new Employee() { ID = 4, Salary = 6000, Experience = 6 });
        Employee.Promote(emplist, emplo=>emplo.Experience>=5);

    }
}
delegate bool Ispromote(Employee emp1);
class Employee
{
    public int ID { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }

    public static void Promote(List<Employee> emplt, Ispromote pro)
    {
        foreach (Employee emp in emplt)
        {
            if (pro(emp))
                Console.WriteLine(emp.ID);
        }
    }

}


11.
// Aggregation (Has-a Relationship) //
using System;
public class Marks
{
    public string subject;
    public int score;

    public Marks(string subject,int score)
    {
        this.subject = subject;
        this.score = score;
    }
}
public class Student
{
    public string name;
    public int id;
    public Marks marks;

    public Student(string name, int id, Marks marks)
    {
        this.name = name;
        this.id = id;
        this.marks = marks;
    }
    public void display()
    {
        Console.WriteLine(id + " " + name + " " + marks.subject + " " + marks.score);
    }
}
public class TestAggregation
{
    public static void Main(string[] args)
    {
        Marks m = new Marks("Maths", 98);
        Student s = new Student("Rishabh", 1, m);
        s.display();
    }
}
